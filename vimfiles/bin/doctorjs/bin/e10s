#!/bin/bash

# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an 'AS IS' basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is DoctorJS.
#
# The Initial Developer of the Original Code is
# Dave Herman <dherman@mozilla.com>
# Portions created by the Initial Developer are Copyright (C) 2010
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#   Dave Herman <dherman@mozilla.com>
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

# Modify this to your own SpiderMonkey path if necessary.
SPIDERMONKEY_SHELL=js

# Modified from:
# http://www.dbforums.com/unix-shell-scripts/1619154-how-unzip-files-recursively.html

runjar()
{
  local jar_file=$1
  local rm_flag=$2

  local jar_dir
  local jar_list
  local new_jar_file
  local new_unjar_sts

  #
  # Verify thar jar file exists
  #

  if [[ ! -e ${jar_file} ]]
  then
    echo "$0 - JAR file not found : ${jar_file}" >&2
    return 1
  fi

  #
  # Create unjar directory
  #

  jar_dir=$PWD/$(basename ${jar_file}).unjar
  if [ ! -d ${jar_dir} ]
  then
    if ! mkdir ${jar_dir}
    then
      echo "$0 - Failed to create directory : ${jar_dir}"
      return 1
    fi
  fi

  #
  # Unjar in unjar directory
  #

  if ! unzip -qq -o ${jar_file} -d ${jar_dir}
  then
    echo "$0 - Unzip error for file : $PWD/${jar_file}"
    return 1
  fi

  #
  # Make sure we have adequate permissions to new files
  #
  chmod -R 777 ${jar_dir}

  #
  # Get list of new jar files
  #

  new_jar_list=${jar_dir}/.new_jar_list
  find ${jar_dir} -type f -name '*.jar' -print > ${new_jar_list}

  #
  # Recursive unzip of new jar files
  #

  unjar_sts=0
  cd ${jar_dir}
  while read new_jar_file
  do
    if ! runjar ${new_jar_file} remove_jar
    then
      unjar_sts=$?
      break
    fi
  done < ${new_jar_list}
  rm -f ${new_jar_list}
  cd ..

  #
  # Remove jar file if required
  #

  if [ -n "${rm_flag}" -a ${unjar_sts} -eq 0 ]
  then
    if ! rm ${jar_file}
    then
      echo "$0 - Failed to delete file : $PWD/${jar_file}"
    fi
    if ! mv ${jar_dir} ${jar_file}
    then
      echo "$0 - Failed to rename unpacked jar dir : $PWD/${jar_dir}"
    fi
  fi

  return 0
}

ROOT=`dirname $0`/..
ROOT=`(cd $ROOT && pwd)`

HERE=`pwd`

XPI_FILE=$1
XPI_DIRNAME=$(cd $(dirname ${XPI_FILE}) && pwd)
XPI_BASENAME=$(basename ${XPI_FILE})
XPI_FILE=${XPI_DIRNAME}/${XPI_BASENAME}

RESULT_DIR=$(echo ${XPI_FILE} | sed -E 's/\.(jar|xpi)$//')

cd ${XPI_DIRNAME}
if [[ ! -e $RESULT_DIR ]]
then
  echo "Unpacking XPI..." >&2
  ERRORS=$(runjar ${XPI_FILE} 2>&1)
  if [ -n "$ERRORS" ]; then
    echo $ERRORS > ${XPI_DIRNAME}/runjar.log
  fi
  mv ${XPI_FILE}.unjar ${RESULT_DIR}
fi

ABS_RESULT_DIR=`(cd $RESULT_DIR && pwd)`

cd $HERE



cd ${ABS_RESULT_DIR}

path_array()
{
  local FILES
  local i
  local FILE

  unset FILES i
  while IFS= read -r -d $'\0' FILE; do
    FILES[i++]='"'"$FILE"'"'
  done < <(find . -path '*/__MACOSX/*' -prune -o -name "$1" -print0)

  IFS=","
  echo "[${FILES[*]}]"

  return 0
}

JS_ARRAY=$(path_array '*.js')
JSM_ARRAY=$(path_array '*.jsm')
XUL_ARRAY=$(path_array '*.xul')

E10S=$ROOT/lib/e10s

ALLJS=${XPI_DIRNAME}/all.js
NORMALIZEDJS=${XPI_DIRNAME}/normalized.js
WRAPPEDJS=${XPI_DIRNAME}/wrapped.js
COORDS=${XPI_DIRNAME}/coords.json
SKIPPED=${XPI_DIRNAME}/skipped.json
TEMPFILE=$(mktemp concat.XXXXXXXXXX)

cd $E10S

echo "Extracting JavaScript..." >&2

ERRORS=$(./concat.js "${ABS_RESULT_DIR}" "${JS_ARRAY}" "${JSM_ARRAY}" "${XUL_ARRAY}" $ALLJS $WRAPPEDJS $COORDS $SKIPPED /tmp/$TEMPFILE 2>&1)

if [ "$?" != "0" ]; then
    echo "concatfail" > ${XPI_DIRNAME}/result
    echo $ERRORS >> ${XPI_DIRNAME}/result
    exit 0
fi

cd $HERE

echo "Checking for empty codebase..." >&2

if [ \! -s $ALLJS ]; then
  echo empty > ${XPI_DIRNAME}/result
  exit 0
fi

echo "Checking applicability of analysis..." >&2

STATS=$(${SPIDERMONKEY_SHELL} -e "var source = snarf('${WRAPPEDJS}');" -f $E10S/bogosity.js 2>&1)

if [ -n "$STATS" ]; then
    echo "$STATS" > ${XPI_DIRNAME}/unanalyzable
    echo unanalyzable > ${XPI_DIRNAME}/result
    exit 0
fi

echo "Normalizing newlines..." >&2

perl -pe 's/\r\n?/\n/g' ${ALLJS} > ${NORMALIZEDJS}

echo "Analyzing source..." >&2

cd $ROOT/lib/cfa2

env time -f "%E" -o ${XPI_DIRNAME}/elapsed ./evtclassify.js $NORMALIZEDJS $COORDS ${XPI_BASENAME} ${XPI_DIRNAME} > ${XPI_DIRNAME}/output 2>&1
