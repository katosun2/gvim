!_TAG_FILE_FORMAT	2	/extended format/
!_TAG_FILE_SORTED	0	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Patrick Walton	/pwalton@mozilla.com/
!_TAG_PROGRAM_NAME	jsctags	//
!_TAG_PROGRAM_URL	http://github.com/pcwalton/jsctags	/GitHub repository/
!_TAG_PROGRAM_VERSION	0.1	//
hexcase	check-crypto-md5.js	/^var hexcase = 0;  \/* hex output format. 0 - lowercase; 1 - uppercase        *\/$/;"	v	lineno:14	type:number
b64pad	check-crypto-md5.js	/^var b64pad  = ""; \/* base-64 pad character. "=" for strict RFC compliance   *\/$/;"	v	lineno:15	type:string
chrsz	check-crypto-md5.js	/^var chrsz   = 8;  \/* bits per input character. 8 - ASCII; 16 - Unicode      *\/$/;"	v	lineno:16	type:number
hex_md5	check-crypto-md5.js	/^function hex_md5(s){ return binl2hex(core_md5(str2binl(s), s.length * chrsz));}$/;"	f	lineno:22	type:string function(string)
b64_md5	check-crypto-md5.js	/^function b64_md5(s){ return binl2b64(core_md5(str2binl(s), s.length * chrsz));}$/;"	f	lineno:23	type:string function(any)
str_md5	check-crypto-md5.js	/^function str_md5(s){ return binl2str(core_md5(str2binl(s), s.length * chrsz));}$/;"	f	lineno:24	type:string function(any)
hex_hmac_md5	check-crypto-md5.js	/^function hex_hmac_md5(key, data) { return binl2hex(core_hmac_md5(key, data)); }$/;"	f	lineno:25	type:string function(any, any)
b64_hmac_md5	check-crypto-md5.js	/^function b64_hmac_md5(key, data) { return binl2b64(core_hmac_md5(key, data)); }$/;"	f	lineno:26	type:string function(any, any)
str_hmac_md5	check-crypto-md5.js	/^function str_hmac_md5(key, data) { return binl2str(core_hmac_md5(key, data)); }$/;"	f	lineno:27	type:string function(any, any)
md5_vm_test	check-crypto-md5.js	/^function md5_vm_test()$/;"	f	lineno:32	type:boolean function()
core_md5	check-crypto-md5.js	/^function core_md5(x, len)$/;"	f	lineno:40	type:Array[number] function(Array[number], number)
md5_cmn	check-crypto-md5.js	/^function md5_cmn(q, a, b, x, s, t)$/;"	f	lineno:138	type:number function(number, number, number, number, number, number)
md5_ff	check-crypto-md5.js	/^function md5_ff(a, b, c, d, x, s, t)$/;"	f	lineno:142	type:number function(number, number, number, number, number, number, number)
md5_gg	check-crypto-md5.js	/^function md5_gg(a, b, c, d, x, s, t)$/;"	f	lineno:146	type:number function(number, number, number, number, number, number, number)
md5_hh	check-crypto-md5.js	/^function md5_hh(a, b, c, d, x, s, t)$/;"	f	lineno:150	type:number function(number, number, number, number, number, number, number)
md5_ii	check-crypto-md5.js	/^function md5_ii(a, b, c, d, x, s, t)$/;"	f	lineno:154	type:number function(number, number, number, number, number, number, number)
core_hmac_md5	check-crypto-md5.js	/^function core_hmac_md5(key, data)$/;"	f	lineno:162	type:Array[number] function(any, any)
safe_add	check-crypto-md5.js	/^function safe_add(x, y)$/;"	f	lineno:182	type:number function(number, number)
bit_rol	check-crypto-md5.js	/^function bit_rol(num, cnt)$/;"	f	lineno:192	type:number function(number, number)
str2binl	check-crypto-md5.js	/^function str2binl(str)$/;"	f	lineno:201	type:Array[number] function(string)
binl2str	check-crypto-md5.js	/^function binl2str(bin)$/;"	f	lineno:213	type:string function(Array[number])
binl2hex	check-crypto-md5.js	/^function binl2hex(binarray)$/;"	f	lineno:225	type:string function(Array[number])
binl2b64	check-crypto-md5.js	/^function binl2b64(binarray)$/;"	f	lineno:240	type:string function(Array[number])
plainText	check-crypto-md5.js	/^var plainText = "Rebellious subjects, enemies to peace,\\n\\$/;"	v	lineno:258	type:string
i	check-crypto-md5.js	/^Will they not hear? What, ho! you men, you beasts,\\n\\$/;"	v	lineno:260	type:number
md5Output	check-crypto-md5.js	/^Throw your mistemper'd weapons to the ground,\\n\\$/;"	v	lineno:264	type:string
